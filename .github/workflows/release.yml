name: release

on:
  push:
    branches: ['master']
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '.dockerignore'
      - 'build.sh'
  workflow_dispatch:
jobs:
  docker: 
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        id: mini_image_id
        with:
          context: .
          file: .github/workflows/Dockerfile
          load: true
          push: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build Docker image
        uses: docker/build-push-action@v5
        id: arm_image_id
        with:
          context: .
          file: .github/workflows/Dockerfile
          load: true
          platforms: linux/arm/v8
          push: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Extract Docker Image
        id: ex
        run: |
          sed -ex
          docker images
          mini_image_id="${{ steps.mini_image_id.outputs.imageid }}"
          mini_image_id=${mini_image_id:7}
          mkdir mini
          mkdir out
          cd mini
          docker save -o mini.tar $mini_image_id
          tar xvf mini.tar
          cat manifest.json
          tar xvf $(jq --raw-output '.[0].Layers[0]' manifest.json)
          tar xvf $(jq --raw-output '.[0].Layers[1]' manifest.json)
          cp ./app/* ../out

          cd ../
          arm_image_id="${{ steps.arm_image_id.outputs.imageid }}"
          arm_image_id=${arm_image_id:7}
          mkdir arm
          cd arm
          docker save -o mini.tar $arm_image_id
          tar xvf mini.tar
          cat manifest.json
          tar xvf $(jq --raw-output '.[0].Layers[0]' manifest.json)
          tar xvf $(jq --raw-output '.[0].Layers[1]' manifest.json)
          mv ./app/until ../out/until-arm
          mv ./app/until-dyn ../out/until-dyn-linux-arm
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-linux
          path: out/*
  mac: 
    runs-on: macos-12

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Rust
        uses: brndnmtthws/rust-action-rustup@v1
        with:
         toolchain: 1.74.1
      - name: Build
        run: |
          cargo build --release && mv target/release/until ./until-mac
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
           name: app-mac
           path: until-mac
  arm:
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Rust
        uses: brndnmtthws/rust-action-rustup@v1
        with:
         toolchain: 1.74.1
      - name: Build
        run: |
          mkdir out
          cargo build --release && mv target/release/until ./out/until-mac-arm
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
           name: app-mac-arm
           path: out/*
  release:
    runs-on: ubuntu-20.04
    needs: ["mac","docker","arm"]
    permissions:
        contents: write
        packages: write
    steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            merge-multiple: true
            pattern: app-*
            path: app/
        - name: Release
          env:
            GH_TOKEN: ${{ github.token }}
          run: |
            gh release create -F CHANGELOG --target master $(date +%Y%m%d) ./app/*
  